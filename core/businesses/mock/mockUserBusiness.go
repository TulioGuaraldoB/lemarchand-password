// Code generated by MockGen. DO NOT EDIT.
// Source: core/businesses/userBusiness.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	requests "github.com/TulioGuaraldoB/lemarchand-password/core/dtos/requests"
	responses "github.com/TulioGuaraldoB/lemarchand-password/core/dtos/responses"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserBusiness is a mock of IUserBusiness interface.
type MockIUserBusiness struct {
	ctrl     *gomock.Controller
	recorder *MockIUserBusinessMockRecorder
}

// MockIUserBusinessMockRecorder is the mock recorder for MockIUserBusiness.
type MockIUserBusinessMockRecorder struct {
	mock *MockIUserBusiness
}

// NewMockIUserBusiness creates a new mock instance.
func NewMockIUserBusiness(ctrl *gomock.Controller) *MockIUserBusiness {
	mock := &MockIUserBusiness{ctrl: ctrl}
	mock.recorder = &MockIUserBusinessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserBusiness) EXPECT() *MockIUserBusinessMockRecorder {
	return m.recorder
}

// VerifyPassword mocks base method.
func (m *MockIUserBusiness) VerifyPassword(passwordRequest *requests.PasswordRequest) *responses.PasswordResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPassword", passwordRequest)
	ret0, _ := ret[0].(*responses.PasswordResponse)
	return ret0
}

// VerifyPassword indicates an expected call of VerifyPassword.
func (mr *MockIUserBusinessMockRecorder) VerifyPassword(passwordRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPassword", reflect.TypeOf((*MockIUserBusiness)(nil).VerifyPassword), passwordRequest)
}
